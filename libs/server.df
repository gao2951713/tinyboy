diff --git a/server.js b/server.js
index f54b7a5..7c54391 100644
--- a/server.js
+++ b/server.js
@@ -12,30 +12,19 @@
  * @property {Object} http.createServer(fn) 创建http对象的方法。
  */
 var http = require('http'),
+
+
     /**
      * nodejs 内置工具模块
      * @property {Object} util
      */
-    util = require('util'),
+    //$ = require('./router').$,
     /**
      * nodejs 内置url地址解析模块
      * @property {Object} url
      *
      */
     url = require('url');
-
-    /**
-     * @property {Object} $ 定义公共对象$,用来存放公共属性和方法的集合对象。
-     */
-var $={},
-    /**
-     * @property {Object} gobj 定义GET路由对象，存放路由对应的方法实现 gobj
-     */
-    gobj={},
-    /**
-     * @property {Object} pobj 定义POST路由对象，存放路由对应的方法实现 pobj
-     */
-    pobj={};
 /**
  * 定义http服务器的请求入口方法。request,为http请求。response 为服务器响应http请求的响应对象。
  * @method reqmethod
@@ -43,99 +32,17 @@ var $={},
  * @param {Object} response 服务器端响应
  *
  */
-function reqmethod (request,response) {
+module.exports.start = function (route){
+	function onRequest(request,response) {
 
 	var pathname = url.parse(request.url).pathname;
-	$.route(pathname,request,response);
+	route(pathname,request,response);
 //	inspect(request);
 	response.writeHead(200,{'Content-Type' : 'text/plain'});
 
 	response.end('helo world \n');
-}
-/**
- * 基础方法GET,将get请求的方法实现存入路由对象gobj中。
- * @method get
- * @param {String} url 请求的入口路径
- * @param {Function} fn 回调函数，为请求方法的实现
- *
- */
-$.get = function (url,fn) {
-	gobj[url] = fn;
-}
-
-/**
- * 基础方法POST,将get请求的方法实现存入路由对象gobj中。
- * @method post
- * @param {String} url 请求的入口路径
- * @param {Function} fn 回调函数，为请求方法的实现
- *
- */
-$.post = function(url,fn) {
-	pobj[url] = fn;
-}
-/**
- * 基础方法，用于将对象以json字符串格式输出到控制台
- * @method inspect
- * @param {Object} obj 需要查看内容的对象
- *
- */
-$.inspect = function(obj) {
-
- console.log(util.inspect(obj),true,3,true);
-}
-
-
-/**
- *
- * 基础方法,http请求解析后的路由跳转，请求到对应的处理方法。
- * @method route 
- * @param {String} pathname 请求路由
- * @param {Object} req 客户端请求，做为回调函数的参数。
- * @param {Object} res 服务器端响应,做为回调函数的参数。
- *
- */
-$.route = function (pathname,req,res) {
-	
-	// 判断请求路由室否为get方法。	
-	// 如果在路由对象gobj中获取到对应的Function的话，
-	// 执行，并传入req，res对象作为参数。
-	// todo 如果没有取到对应的实现方法，判定为非法请求。进入非法请求处理。
-	if(req.method.toLowerCase() == "get") {
-		if(pathname in gobj) {
-			gobj[pathname](req,res);
-		}
 	}
-	// 判断请求路由是否为post方法。	
-	// 如果在路由对象pobj中获取到对应的Function的话，
-	// 执行，并传入req，res对象作为参数。
-	if(req.method.toLowerCase() == "post") {
-		if(pathname in pobj) {
-			pobj[pathname](req,res);
-		}
-	}
-
-	console.log("this is a route"+pathname);
 
+	http.createServer(onRequest).listen(3000);
+	console.log('server start at localhost:3000/')
 }
-
-// 测试方法，添加get路由
-$.get('/',function(req,res){
-	console.log(req.method+"\n");
-	console.log("method get");
-});
-
-// 测试方法，添加post路由
-$.post("/",function(req,res){
-	console.log(req.method+"\n");
-	console.log("method post");
-});
-
-
-/**
- * 创建服务器的运行实例，并监听3000端口。
- * @property {Object} server
- *
- */
-var server = http.createServer(reqmethod).listen(3000);
-
-console.log('server start at localhost:3000/')
